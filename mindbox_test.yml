apiVersion: apps/v1
kind: Deployment
metadata:
  name: mindbox_app
  namespace: staging  
  labels:
    environment: test
    application: mindbox
spec:
  selector:
    matchLables:
      application: mindbox
      environment: test
  
  replicas: 1                     # Количество копий модулей по-умолчанию
  revisionHistoryLimit: 5         # Количество хранимых версий развертывания в истории
    
  imagePullSecrets:
  - name: mindbox-dockerhub-secre # Секрет с данными авторизации к частному репозиторию образов
  
  # *******************************************************************************************************
  # СТРАТЕГИЯ ОБНОВЛЕНИЯ РАЗВЕРТЫВАНИЯ И ЕЕ ПАРАМЕТРЫ
  progressDeadlineSeconds: 300    # Максимальное время в секундах для выполнения развертывания, прежде чем оно будет считаться неудачным.
  
  minReadySeconds: 50             # Время задержки перед обновлением, чтобы убедиться в готовности модуля
                                  # Проверки готовности будут начинаться с 11 секунды после запуска. 
                                  # Если до 50 секунды не будет выявлено ошибок - обновление продолжится
  
  strategy:                       # Выбор стратегии обновления развертывания и ее показателей    
  type: RollingUpdate  
  rollingUpdate:       
    maxSurge: 1
    maxUnavailable: 0             # Развертывание будет заменять модули один за другим

  # *******************************************************************************************************
  # РАЗДЕЛ ШАБЛОНОВ И ИХ СПЕЦИФИКАЦИЙ
  template:
    metadata:
      labels:
        application: mindbox
        environment: test
    spec:  
      containers:
        - name:  mindbox_app_main          
          image:  mindbox:2.0
          ports:
            - containerPort: 80
            - hostPort: 7030

          # *******************************************************************************************************
          # КОНТЕКСТ БЕЗОПАСНОСТИ КОНТЕЙНЕРА
          # Цель - максимально обезопасить контейнер
          securityContext:
            capabilities:
              add:                    # Добавить одну функциональную возможность в контейнер
              - CHOWN       
              drop: ["all"]           # Исключить все функциональные возможности из контейнера (забрать все мандаты)
            runAsUser: 1200    
            runAsNonRoot: true        # Запретить запуск контейнера от имени root
            privileged: false         # Отключить запуск контейнера в привелегированном режиме чтобы отключить полный доступ к ядру узла
            readOnlyRootFilesystem: true     # Запретить запись файлов в файловую систему контейнера (можно только в смонтированные Тома)
            allowPrivilegeEscalation: false  # Запретить запуск исполняемых файлов с setuid (с превышением полномочий пользователя)

          # *******************************************************************************************************
          # ПРОВЕРКИ ЖИВУЧЕСТИ И ГОТОВНОСТИ
          # Цель - сделать работу развертывания как можно более отказоустойчивой
          livenessProbe:             # Проверка живучести типа httpGet на доступ к объекту healthz через порт 8080
            initialDelaySeconds: 15  # Перед исполнением первой проверки Kubernetes будет ждать 15 секунд
            periodSeconds: 5         # Частота проверок
            httpGet:
              path: /health_ready
              port: 7001
              httpHeaders:
              - name: Custom-Header
                value: Health

          readinessProbe:            # Проверка готовности типа exec
            exec:
              command:
              - ls
              - /var/ready
            initialDelaySeconds: 11 
            periodSeconds: 5 

          # *******************************************************************************************************
          # РЕСУРСЫ
          # Цель - ограничить потребление ресурсов модулями
          resources:        
            requests:       
              cpu: 100      # Процессорное время (100 миллиядер = 1/10 от времени одного ядра процессора)
              memory: 128Mi # Объем оперативной памяти
            limits:         
              cpu: 1000     # Выделение одного ядра ЦП в качестве лимита
              memory: 150Mi # Небольшое увеличиние лимита ОЗУ, чтобы избежать OOM(Out of memory - часть best practices)

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler  # Создание автоскейлера (HPA) для развертывания mindbox_app
metadata:
  name: mindbox_app_hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mindbox_app
  minReplicas: 1                      # Минимальное число копий развертывания
  maxReplicas: 4                      # Максимальное число копий развертывания
  targetCPUUtilizationPercentage: 70  # Начать процедуру увеличения количества копий с момента достижения 70% порога загрузки ЦП


  # Также можно добавить возможность изменения количества копий путем чтения изменений в метриках из Prometheus
  # metrics:
  # - type: Object
  #   object:
  #     metricName: total_queue_size
  #     target:
  #       apiVersion: v1
  #      kind: Service
  #     name: queue_service
  #   targetValue: 30 # Граница увеличения/уменьшения копий

#*********************************************************************************************************************************
# В работе над данным манифест-файлом использовались собственные наработки, официальная документация Kubernetes, а также книги:
# Вехен Дж.   - Безопасный DevOps (Для профессионалов)
# Арундел Дж. - Kubernetes для DevOps. Развертывание, запуск и масштабирование в облаке
